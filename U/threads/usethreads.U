?RCS: $Id: usethreads.U,v $
?RCS:
?RCS: Copyright (c) 1998-2000 Andy Dougherty
?RCS:
?RCS: You may distribute under the terms of either the GNU General Public
?RCS: License or the Artistic License, as specified in the README file.
?RCS:
?RCS: $Log: usethreads.U,v $
?RCS:
?MAKE:usethreads useithreads use5005threads d_oldpthreads: \
	Myread Oldconfig Setvar test cat
?MAKE:	-pick add $@ %<
?Y:TOP
?S:usethreads:
?S:	This variable conditionally defines the USE_THREADS symbol,
?S:	and indicates that Perl should be built to use threads.
?S:.
?S:useithreads:
?S:	This variable conditionally defines the USE_ITHREADS symbol,
?S:	and indicates that Perl should be built to use the interpreter-based
?S:	threading implementation.
?S:.
?S:use5005threads:
?S:	This variable conditionally defines the USE_5005THREADS symbol,
?S:	and indicates that Perl should be built to use the 5.005-based
?S:	threading implementation.
?S:.
?X: I'm putting old_pthreads in this unit because it might eventually
?X: be part of an automatic determination to see if we can use threads
?X: at all.
?S:d_oldpthreads:
?S:	This variable conditionally defines the OLD_PTHREADS_API symbol,
?S:	and indicates that Perl should be built to use the old
?S:	draft POSIX threads API.  This is only potentially meaningful if
?S:	usethreads is set.
?S:.
?C:USE_ITHREADS:
?C:	This symbol, if defined, indicates that Perl should be built to
?C:	use the interpreter-based threading implementation.
?C:.
?C:USE_5005THREADS:
?C:	This symbol, if defined, indicates that Perl should be built to
?C:	use the 5.005-based threading implementation.
?C:.
?C:USE_THREADS:
?C:	This symbol, if defined, indicates that Perl should
?C:	be built to use threads.  At present, it is a synonym for
?C:	USE_5005THREADS, but eventually the source ought to be changed
?C:	to use this to mean _any_ threading implementation.
?C:.
?C:OLD_PTHREADS_API:
?C:	This symbol, if defined, indicates that Perl should
?C:	be built to use the old draft POSIX threads API.
?C:.
?H:#$use5005threads	USE_5005THREADS		/**/
?H:#$useithreads	USE_ITHREADS		/**/
?H:?%<:#if defined(USE_5005THREADS) && !defined(USE_ITHREADS)
?H:?%<:#define		USE_THREADS		/* until src is revised*/
?H:?%<:#endif
?H:#$d_oldpthreads	OLD_PTHREADS_API		/**/
?H:.
?LINT:set usethreads useithreads use5005threads d_oldpthreads
?INIT:: set usethreads on the Configure command line to enable threads.
?F:!usethreads.cbu
?X: We should really have some explanatory text here, and some
?X: automatic setting of sensible defaults.
case "$usethreads" in
$define|true|[yY]*)     dflt='y';;
*) dflt='n';;
esac
cat <<EOM

Perl can be built to take advantage of threads on some systems.
To do so, Configure can be run with -Dusethreads.

Note that threading is a highly experimental feature, and
some known race conditions still remain.  If you choose to try
it, be very sure to not actually deploy it for production
purposes.  README.threads has more details, and is required
reading if you enable threads.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
rp='Build a threading Perl?'
. ./myread
case "$ans" in
y|Y)    val="$define" ;;
*)      val="$undef" ;;
esac
set usethreads
eval $setvar

case "$usethreads" in
$define)
	$cat <<EOM

As of 5.5.640, Perl has two different internal threading implementations,
the 5.005 version (5005threads) and an interpreter-based version
(ithreads) that has one interpreter per thread.  Both are very 
experimental.  This arrangement exists to help developers work out
which one is better.

If you're a casual user, you probably don't want interpreter-threads
at this time.  There doesn't yet exist a way to create threads from
within Perl in this model, i.e., "use Thread;" will NOT work.
EOM
	: Default to ithreads unless overridden on command line or with
	: old config.sh
	dflt='y'
	case "$use5005threads" in
		$define|true|[yY]*) dflt='n';;
	esac
	case "$useithreads" in
		$undef|false|[nN]*) dflt='n';;
	esac
	rp='Use interpreter-based ithreads?'
	. ./myread
	case "$ans" in
	y|Y)    val="$define" ;;
	*)      val="$undef" ;;
	esac
	set useithreads
	eval $setvar
	: Now set use5005threads to the opposite value.
	case "$useithreads" in
	$define) val="$undef" ;;
	*) val="$define" ;;
	esac
	set use5005threads
	eval $setvar
	;;
*)
	useithreads="$undef"
	use5005threads="$undef"
	;;
esac

?X: Check out what kind of threads api we have
case "$d_oldpthreads" in
'')	: Configure tests would be welcome here.  For now, assume undef.
	val="$undef" ;;
*)	val="$d_oldpthreads" ;;
esac
set d_oldpthreads
eval $setvar

?X: In general, -lpthread needs to come before -lc but after other
?X: libraries such as -lgdbm and such like. We assume here that -lc
?X: is present in libswanted. If that fails to be true, then this
?X: can be changed to add pthread to the very end of libswanted.

case "$usethreads" in
"$define"|true|[yY]*)
: Look for a hint-file generated 'call-back-unit'.  If the
: user has specified that a threading perl is to be built,
: we may need to set or change some other defaults.
	if $test -f usethreads.cbu; then
		echo "Your platform has some specific hints for threaded builds, using them..."
		. ./usethreads.cbu
	else
		$cat <<EOM
(Your platform doesn't have any specific hints for threaded builds.
 Assuming POSIX threads, then.)
EOM
	fi
	;;
esac

