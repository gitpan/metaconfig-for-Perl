?RCS: $Id: usethreads.U,v $
?RCS:
?RCS: Copyright (c) 1998-2000 Andy Dougherty
?RCS:
?RCS: You may distribute under the terms of either the GNU General Public
?RCS: License or the Artistic License, as specified in the README file.
?RCS:
?RCS: $Log: usethreads.U,v $
?RCS:
?MAKE:usethreads useithreads use5005threads d_oldpthreads usereentrant: \
	Myread Oldconfig Setvar test cat useperlio
?MAKE:	-pick add $@ %<
?Y:TOP
?S:usethreads:
?S:	This variable conditionally defines the USE_THREADS symbol,
?S:	and indicates that Perl should be built to use threads.
?S:.
?S:useithreads:
?S:	This variable conditionally defines the USE_ITHREADS symbol,
?S:	and indicates that Perl should be built to use the interpreter-based
?S:	threading implementation.
?S:.
?S:use5005threads:
?S:	This variable conditionally defines the USE_5005THREADS symbol,
?S:	and indicates that Perl should be built to use the 5.005-based
?S:	threading implementation.
?S:.
?X: I'm putting old_pthreads in this unit because it might eventually
?X: be part of an automatic determination to see if we can use threads
?X: at all.
?S:d_oldpthreads:
?S:	This variable conditionally defines the OLD_PTHREADS_API symbol,
?S:	and indicates that Perl should be built to use the old
?S:	draft POSIX threads API.  This is only potentially meaningful if
?S:	usethreads is set.
?S:.
?S:usereentrant:
?S:	This variable conditionally defines the USE_REENTRANT_API symbol,
?S:	which indicates that the thread code may try to use the various
?S:	_r versions of library functions.  This is only potentially
?S:	meaningful if usethreads is set and is very experimental, it is
?S:	not even prompted for.
?S:.
?C:USE_ITHREADS:
?C:	This symbol, if defined, indicates that Perl should be built to
?C:	use the interpreter-based threading implementation.
?C:.
?C:USE_5005THREADS:
?C:	This symbol, if defined, indicates that Perl should be built to
?C:	use the 5.005-based threading implementation.
?C:.
?C:USE_THREADS:
?C:	This symbol, if defined, indicates that Perl should
?C:	be built to use threads.  At present, it is a synonym for
?C:	USE_5005THREADS, but eventually the source ought to be changed
?C:	to use this to mean _any_ threading implementation.
?C:.
?C:OLD_PTHREADS_API:
?C:	This symbol, if defined, indicates that Perl should
?C:	be built to use the old draft POSIX threads API.
?C:.
?C:USE_REENTRANT_API:
?C:	This symbol, if defined, indicates that Perl should
?C:	try to use the various _r versions of library functions.
?C:	This is extremely experimental.
?C:.
?H:#$use5005threads	USE_5005THREADS		/**/
?H:#$useithreads	USE_ITHREADS		/**/
?H:?%<:#if defined(USE_5005THREADS) && !defined(USE_ITHREADS)
?H:?%<:#define		USE_THREADS		/* until src is revised*/
?H:?%<:#endif
?H:#$d_oldpthreads	OLD_PTHREADS_API		/**/
?H:#$usereentrant	USE_REENTRANT_API	/**/
?H:.
?LINT:set usethreads useithreads use5005threads d_oldpthreads usereentrant
?INIT:: set usethreads on the Configure command line to enable threads.
?INIT:usereentrant='undef'
?F:!usethreads.cbu
?X: We should really have some explanatory text here, and some
?X: automatic setting of sensible defaults.
case "$usethreads" in
$define|true|[yY]*)     dflt='y';;
*)     # Catch case where user specified ithreads or 5005threads but
       # forgot -Dusethreads (A.D. 4/2002)
       case "$useithreads$use5005threads" in
       *$define*)      
		case "$useperlio" in
		"$define")	dflt='y' ;;
		*)		dflt='n' ;;
		esac
		;;
       *)	dflt='n';;
       esac
       ;;
esac
cat <<EOM

Perl can be built to take advantage of threads on some systems.
To do so, Configure can be run with -Dusethreads.

Note that Perl built with threading support runs slightly slower
and uses more memory than plain Perl. The current implementation
is believed to be stable, but it is fairly new, and so should be
treated with caution.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
rp='Build a threading Perl?'
. ./myread
case "$ans" in
y|Y)    val="$define" ;;
*)      val="$undef" ;;
esac
set usethreads
eval $setvar

case "$usethreads" in
$define)
	$cat <<EOM

Since release 5.6, Perl has had two different threading implementations,
the newer interpreter-based version (ithreads) with one interpreter per
thread, and the older 5.005 version (5005threads).
The 5005threads version is effectively unmaintained and will probably be
removed in Perl 5.10, so there should be no need to build a Perl using it
unless needed for backwards compatibility with some existing 5.005threads
code.

EOM
	: Default to ithreads unless overridden on command line or with
	: old config.sh
	dflt='y'
	case "$use5005threads" in
		$define|true|[yY]*) dflt='n';;
	esac
	case "$useithreads" in
		$undef|false|[nN]*) dflt='n';;
	esac
	rp='Use the newer interpreter-based ithreads?'
	. ./myread
	case "$ans" in
	y|Y)    val="$define" ;;
	*)      val="$undef" ;;
	esac
	set useithreads
	eval $setvar
	: Now set use5005threads to the opposite value.
	case "$useithreads" in
	$define) val="$undef" ;;
	*) val="$define" ;;
	esac
	set use5005threads
	eval $setvar
	;;
*)
	useithreads="$undef"
	use5005threads="$undef"
	;;
esac

?X: This is not supposed to be possible but with some trickery, maybe.
case "$useithreads$use5005threads" in
"$define$define")
	$cat >&4 <<EOM

You cannot have both the ithreads and the 5.005 threads enabled
at the same time.  Disabling the 5.005 threads since they are
much less stable than the ithreads.

EOM
	use5005threads="$undef"
	;;
esac

if test X"$usethreads" = "X$define" -a "X$useperlio" = "Xundef"; then
	cat >&4 <<EOF
***
*** To build with ithreads you must also use the PerlIO layer.
*** Cannot continue, aborting.
***
EOF
	exit 1
fi

?X: Check out what kind of threads api we have
case "$d_oldpthreads" in
'')	: Configure tests would be welcome here.  For now, assume undef.
	val="$undef" ;;
*)	val="$d_oldpthreads" ;;
esac
set d_oldpthreads
eval $setvar

?X: In general, -lpthread needs to come before -lc but after other
?X: libraries such as -lgdbm and such like. We assume here that -lc
?X: is present in libswanted. If that fails to be true, then this
?X: can be changed to add pthread to the very end of libswanted.

case "$usethreads" in
"$define"|true|[yY]*)
: Look for a hint-file generated 'call-back-unit'.  If the
: user has specified that a threading perl is to be built,
: we may need to set or change some other defaults.
	if $test -f usethreads.cbu; then
		echo "Your platform has some specific hints for threaded builds, using them..."
		. ./usethreads.cbu
	else
		$cat <<EOM
(Your platform doesn't have any specific hints for threaded builds.
 Assuming POSIX threads, then.)
EOM
	fi
	;;
esac

